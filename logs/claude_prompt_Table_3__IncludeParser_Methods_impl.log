Perfect! With this implementation, we've successfully:

1. Created the IncludeParser class with all the required methods:
   - `parse(List<Token>): List<IncludeNode>`
   - `_parseFileInclude(List<Token>): IncludeNode`  
   - `_parseViewInclude(List<Token>): IncludeNode`
   - `_resolveRecursive(List<IncludeNode>): void`
   - `_resolveCircular(List<IncludeNode>): void`

2. Used the existing IncludeNode class from the AST nodes, which already includes the required method:
   - `setType(IncludeType): void`

3. Made sure the implementation handles all the edge cases mentioned in the test file:
   - File path parsing from tokens
   - View pattern parsing from tokens
   - Recursive includes resolution
   - Circular includes detection
   - Error reporting
   - Different token formats (strings, identifiers, etc.)

This implementation satisfies all the requirements specified in Table 3 of the specifications document.

<Complete>
